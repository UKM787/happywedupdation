"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2528],{92737:(n,e,a)=>{a.d(e,{Z:()=>r});var s=a(94015),i=a.n(s),t=a(23645),d=a.n(t)()(i());d.push([n.id,".error[data-v-35959ded]{color:#f57f6c;font-size:10px}","",{version:3,sources:["webpack://./resources/js/components/commonComponents/VueValidation.vue"],names:[],mappings:"AAgHA,wBAEA,aAAA,CADA,cAEA",sourcesContent:['<template>\n    <span\n        class="error"\n        v-if="\n            !nestedName.required &&\n            nestedName.$dirty &&\n            validation.includes(\'required\')\n        "\n    >\n        This feild is required\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.minLength &&\n            nestedName.$dirty &&\n            validation.includes(\'minLength\')\n        "\n    >\n        This feild must have at least\n        {{ nestedName.$params.minLength.min }}\n        characters.\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.maxLength &&\n            nestedName.$dirty &&\n            validation.includes(\'maxLength\')\n        "\n    >\n        This feild must be only\n        {{ nestedName.$params.maxLength.max }}\n        characters.\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.alpha_num &&\n            nestedName.$dirty &&\n            validation.includes(\'alpha_num\')\n        "\n    >\n        This feild must be in an alpha numeric format.\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.alpha &&\n            nestedName.$dirty &&\n            validation.includes(\'alpha\')\n        "\n    >\n        This feild must be in letters.\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.email &&\n            nestedName.$dirty &&\n            validation.includes(\'email\')\n        "\n    >\n        This feild must be an email.\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.numeric &&\n            nestedName.$dirty &&\n            validation.includes(\'numeric\')\n        "\n    >\n        This feild must be a number.\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.digits_validate &&\n            nestedName.$dirty &&\n            validation.includes(\'digits_validate\')\n        "\n    >\n        This feild must be 10 digits.\n    </span>\n    <span\n        class="error"\n        v-else-if="\n            !nestedName.url && nestedName.$dirty && validation.includes(\'url\')\n        "\n    >\n        This feild must be a valid URL.\n    </span>\n</template>\n\n<script>\nexport default {\n    props: {\n        instance: Object,\n        nestedName: Object,\n        validation: Array,\n    },\n\n    data() {\n        return {};\n    },\n\n    computed: {},\n};\n<\/script>\n\n<style scoped>\n.error {\n    font-size: 10px;\n    color: #f57f6c;\n}\n</style>\n'],sourceRoot:""}]);const r=d},52528:(n,e,a)=>{a.r(e),a.d(e,{default:()=>l});const s={props:{instance:Object,nestedName:Object,validation:Array},data:function(){return{}},computed:{}};var i=a(93379),t=a.n(i),d=a(92737),r={insert:"head",singleton:!1};t()(d.Z,r);d.Z.locals;const l=(0,a(51900).Z)(s,(function(){var n=this,e=n._self._c;return!n.nestedName.required&&n.nestedName.$dirty&&n.validation.includes("required")?e("span",{staticClass:"error"},[n._v("\n    This feild is required\n")]):!n.nestedName.minLength&&n.nestedName.$dirty&&n.validation.includes("minLength")?e("span",{staticClass:"error"},[n._v("\n    This feild must have at least\n    "+n._s(n.nestedName.$params.minLength.min)+"\n    characters.\n")]):!n.nestedName.maxLength&&n.nestedName.$dirty&&n.validation.includes("maxLength")?e("span",{staticClass:"error"},[n._v("\n    This feild must be only\n    "+n._s(n.nestedName.$params.maxLength.max)+"\n    characters.\n")]):!n.nestedName.alpha_num&&n.nestedName.$dirty&&n.validation.includes("alpha_num")?e("span",{staticClass:"error"},[n._v("\n    This feild must be in an alpha numeric format.\n")]):!n.nestedName.alpha&&n.nestedName.$dirty&&n.validation.includes("alpha")?e("span",{staticClass:"error"},[n._v("\n    This feild must be in letters.\n")]):!n.nestedName.email&&n.nestedName.$dirty&&n.validation.includes("email")?e("span",{staticClass:"error"},[n._v("\n    This feild must be an email.\n")]):!n.nestedName.numeric&&n.nestedName.$dirty&&n.validation.includes("numeric")?e("span",{staticClass:"error"},[n._v("\n    This feild must be a number.\n")]):!n.nestedName.digits_validate&&n.nestedName.$dirty&&n.validation.includes("digits_validate")?e("span",{staticClass:"error"},[n._v("\n    This feild must be 10 digits.\n")]):!n.nestedName.url&&n.nestedName.$dirty&&n.validation.includes("url")?e("span",{staticClass:"error"},[n._v("\n    This feild must be a valid URL.\n")]):n._e()}),[],!1,null,"35959ded",null).exports}}]);
//# sourceMappingURL=2528.js.map